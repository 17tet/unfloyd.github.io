[{"title":"Hello World","url":"/unfloyd.github.io/2023/10/20/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Shader 01 What Happens During Rendering  ＆  first lighting model Lambert","url":"/unfloyd.github.io/2023/10/23/post/","content":"Rendering Pipeline OverviewThe rendering pipeline transforms a 3D scene into a 2D pixel image, starting from 3D vertices, processing them, and resulting in the final image.\nStages:\nApplication: Begins rendering by creating and managing 3D data.\n\nVertex Processing: Transforms 3D vertex data to screen positions.\n\nTriangle Processing: Determines which triangles from processed vertices are visible.\n\nRasterization: Turns triangles into fragments, each matching screen pixels.\n\nFragment Processing: Calculates the final color of each fragment.\n\nFramebuffer Operations: Writes fragment colors into the framebuffer to form the image.\n\nDisplay: Sends the image from the framebuffer to the display.\n\n\n\nLambert ModelThe Lambert lighting model is mainly used to simulate the lighting phenomena on rough surfaces. Before understanding this model, let’s review what dot product is.\n\nThe graphycal meaning of the dot product in graphics can be understood as the projection of vector a onto vector b. When the two vectors (scalars) have the same direction, the result is 1; when they are completely opposite, the result is -1; and when perpendicular, the result is 0.\nBy using it, we can send a ray of light to the model,\n\nBased on the relative position of the light source and the object, we get:\n\nThe normal direction vector of the object surface nDir (i.e., normal direction)\nThe direction vector of the light source and the object direction vector lDir (i.e., LightDir)\nnDir · lDir (dot product of the two) represents the relationship between the direction of the light source and the normal of the object.\n\nTo determine the brightness level of the object surface:\n\nBright part: value is 1, pure white;\nTransition from light to dark: value is 0, black;\nDark part: value is negative, black.\n\nNegative numbers are meaningless in terms of brightness, so we add 1 to turn it into 0, and thus obtain the Lambert lighting model.\n\nSince the dark part of the Lambert model is too black, we can multiply the obtained value by 0.5 and then add 0.5 to get the more commonly used Half-Lambert model.\n\nImplementation in Unity\nShadergraph:\n\n\n*Source:https://www.bilibili.com/video/BV1BE411N74b/?vd_source=b260b3b480cf48e5522d25eac812c665https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html\n","tags":["shader"]}]